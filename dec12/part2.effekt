import io/args
import immutable/list
import mutable/array
import mutable/map
import io/async
import text/string

import common

def parseNumberList(str: String): List[Int] = {
  val multiple = (str ++ ",").repeat(5)
  return multiple.split(",").collect { inp => inp.toInt() }.toListFixed()
}

def parseProblem(line: String): Option[Problem] = {
  val parts = line.splitL(" ")
  val ret = parts match {
    case Cons(springs, Cons(numbers, Nil())) => Some(Problem(parseSprings(springs), parseNumberList(numbers)))
    case _ => None()
  }
  return ret
}

def multiply(initialProblem: Problem, currentSprings: List[Spring], remainingSizes: List[Int], count: Int) : Int = {
  if (count == 0) {
    val res = calculate(Problem(currentSprings, remainingSizes))
    res
  } else {
    val good = indices(Cons(0, remainingSizes)).map { index =>
      val first = calculate(Problem(currentSprings, remainingSizes.take(index)))
      if (first > 0) {
        val second = multiply(initialProblem, initialProblem.springs, remainingSizes.drop(index), count - 1)
        first * second
      } else {
        0
      }
    }.sum()
    val bad = multiply(initialProblem, currentSprings.append(Cons(Bad(), initialProblem.springs)), remainingSizes, count - 1)
    good + bad
  }
}


def program(lines: List[String]) =  {
  val problems = lines.collect{line => parseProblem(line)}
  val result = problems.map { prob =>
    multiply(prob, prob.springs, prob.sizes, 4)
  }.sum()

  println(result)
}

def main() = {
  val args = commandLineArgs()
  fork(box {
    asyncIO(box {
      program(args)
    })
  })

}

// vi: tabstop=2 commentstring=//%s ft=scala
